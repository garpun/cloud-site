[
{
	"uri": "https://cloud.garpun.com/get_started/create_project/",
	"title": "Добавление проекта и приложения",
	"tags": [],
	"description": "",
	"content": "Все дальнейшие действия обязательны для любой интеграции с Garpun Cloud, если вы хотите получить что-то более, чем вход в ваш сервис через https://account.garpun.com.\nЗарегистрируйтесь в системе Garpun Для работы с Garpun API вам нужен обычный пользовательский аккаунт в системе Garpun. Если у вас нет аккаунта в системе Garpun, то создайте его на https://garpun.com.\nЗарегистрируйте проект Войдите под своей учетной записью в https://console.cloud.garpun.com и добавьте новый проект.\nИдентификатор проекта глобально уникальный и его нельзя изменить после создания.\nВключите необходимые вам API В проекте на вкладке \u0026ldquo;API и сервисы / Библиотека API\u0026rdquo; нажмите на плитке нужного вам сервиса и активируите его апи для вашего проекта.\nНастройте окно запроса доступа В проекте на вкладке \u0026ldquo;API и сервисы / Окно запроса доступа\u0026rdquo; заполните название приложение, выберите нужные вашему приложению области действия. Без их выбора и модерации вы не сможете вызывать API включенные вами API.\nУкажите ссылку на сайт вашего приложения.\nПосле заполнения всех нужных полей сохраните форму и отправьте ее на модерацию. Модерация ручная и продлится некоторе время.\nВыберите вариант авторизации вашего приложения Для авторизации пользователей через Garpun Account в браузере - с помощью oauth2\nДля авторизации вашего серверного приложения Сервер → Сервер - с помощь сервисного аккаунта\n"
},
{
	"uri": "https://cloud.garpun.com/api_accountmanagement/overview/",
	"title": "Обзор",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://accountmanagement-api.garpun.com\nВысокоуровневые операции с аккаунтами внешних систем: Управление бюджетом, создание аккаунтов в Яндекс Директе, Google Ads и пр\nВнимание! Лимит доступный для зачисления изменяется посредством системы медиапланирования. Поэтому для совершения финансовых методов BudgetOrder, вам необходимо сообщить вашему менеджеру id клиента который вы будете использовать при вызове API. Лимит увеличится после согласования медиаплана. Пример обращения в API Для того чтобы отправить запрос необходимо отправить на выбраный вами метод http сообщение содержащие токен в заголовке Authorization:Bearer и запрос в формате JSON после параметра -d\ncurl -i -X POST \\  -H \u0026#34;Authorization:Bearer eyJ...arSQ\u0026#34; \\  -H \u0026#34;Content-Type:application/json\u0026#34; \\  -d \u0026#39;{ \u0026#34;client_id\u0026#34;: \u0026#34;12345\u0026#34;, \u0026#34;balance_slice\u0026#34;: \u0026#34;ENGINE\u0026#34; }\u0026#39; \\  \u0026#39;https://accountmanagement-api.garpun.com/v1beta2/budget-order/limit\u0026#39; Описание ошибок Ошибки обрабатываются стандартным образом - подробнее про обработку ошибок\n"
},
{
	"uri": "https://cloud.garpun.com/api_datahub/overview/",
	"title": "Обзор",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://datahub-api.garpun.com\nПолучение списков справочников, статистических отчетов и контента настроенных потоков данных. Это API будет вам необходимо, если вы являетесь интеграционным партнером Garpun.\nAPI спроектировано для потоковой обработки данных и поэтому не возвращает классический JSON. Вместо этого, есть JSON_NEWLINE, по сути это - json объекты, разделенные переносом строки так, что каждая строка данных оказывается на новой строке выходного потока данных.\nПример обращения в API Для синхронизации данных со своей БД Получение данных SQL-like запросом. Используется язык запросов METAQL. Данные из этого источника могут возвращаться только в формате JSON_NEWLINE.\nИспользуйте этот метод для синхронизации данных.\ncurl --compressed -v -N -X POST \\ -d '{\u0026quot;query\u0026quot;:\u0026quot;select id, name from meta.dynamic_date_range\u0026quot;}'\\ -H \u0026quot;Content-Type:application/json\u0026quot; \\ \u0026quot;https://datahub-api.garpun.com/v1/metaql/query\u0026quot;  Некоторые данные хранятся специальным образом и для них нужно передавать shardKey. В документации в конкретным данным будет указано как именно можно получить shardKey.\ncurl --compressed -v -N -X POST \\ -d '{\u0026quot;shardKey\u0026quot;: \u0026quot;42\u0026quot;, \u0026quot;query\u0026quot;:\u0026quot;SELECT id, virtual_ad_group_id, remote_id FROM garpun_storage.ad_group WHERE modification_time \u0026lt; '2020-01-01 00:00:00'\u0026quot;}'\\ -H \u0026quot;Content-Type:application/json\u0026quot; \\ \u0026quot;https://datahub-api.garpun.com/v1/metaql/query\u0026quot;  Для интеграции с Garpun Feeds Формат возвращаемых данных можут настраиваться.\nПолучение данных фида\ncurl --compressed -v -N -X POST \\ -H \u0026quot;Content-Type:application/json\u0026quot; \\ \u0026quot;https://datahub-api.garpun.com/v1/feeds/feed_data/{feed_key}?format=csv\u0026amp;from=2020-01-01\u0026amp;to=2020-01-10\u0026quot;  Получение схемы фида\ncurl --compressed -v -N -X POST \\ -H \u0026quot;Content-Type:application/json\u0026quot; \\ \u0026quot;https://datahub-api.garpun.com/v1/feeds/feed_schema/{feed_key}\u0026quot;  Библиотеки Для аналитиков существует python-библиотека\nА так же посмотрите другие варианты работы с API используя библиотеки от Google\nОписание ошибок Ошибки обрабатываются стандартным образом - подробнее про обработку ошибок\n"
},
{
	"uri": "https://cloud.garpun.com/api_generator/overview/",
	"title": "Обзор",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://amp.garpun.com/api\nОперации с объектами сервиса Generator\nПример обращения в API Для того чтобы отправить запрос необходимо отправить на выбраный вами метод http сообщение содержащие токен в заголовке Authorization:Bearer и запрос в формате JSON после параметра -d\ncurl -i -X POST \\  -H \u0026#34;Authorization:Bearer eyJ...arSQ\u0026#34; \\  -H \u0026#34;Content-Type:application/json\u0026#34; \\  -d \u0026#39;{ }\u0026#39; \\  \u0026#39;https://amp.garpun.com/api/v2/projects/2249/algorithms/47553/start\u0026#39; "
},
{
	"uri": "https://cloud.garpun.com/authenticate/overview/",
	"title": "Обзор",
	"tags": [],
	"description": "",
	"content": "Варианты авторизации Для авторизации пользователей через Garpun Account в браузере используйте oauth2. Обычно oauth2 используется для реализации \u0026ldquo;Вход через Garpun\u0026rdquo;. Минусы этого варианта при работе сервер-сервер в том, что при блокировке пользователя Garpun перестают работать refresh_token-ы, которые выпустил этот пользователь и надо опять проходить достаточно сложную процедуру получения refresh_token для другого пользователя. Также все логи взаимодействия с Garpun API будут записаны из под этого пользователя.\nГораздо более удобный вариант для авторизации Сервер → Сервер - использование сервисного аккаунта\nПередача access_token в api Garpun выдает access_token в обмен на refresh токен, который получается при oauth2 авторизации или на jwt_assertion, который вы сможете сгенерировать с помощью ключа сервисного аккаунта.\nИспользуете готовые библиотеки от Google Если вы используете сервисный аккаунт Garpun, то вы можете просто использовать библиотки от Google, чтобы работать с Garpun API. Примеры есть на странице про сервисный аккаунт.\nAuthorization Header (предпочтительно) Более безопасный вариант, так как авторизационные данные не сохраняются в логах прокси серверов, а отличае, а от передачи токена как параметр url.\nAuthorization: Bearer {access_token} Параметр URL (не рекомендуется) Вызов url api делается с передачей GET параметра запроса access_token. Не рекомедуется, так как это гораздо менее безопсный вариант авторизации, чем передача через заголовок http запроса.\nhttps://......./?access_token={access_token} "
},
{
	"uri": "https://cloud.garpun.com/get_started/",
	"title": "С чего начать",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/metaql/",
	"title": "Meta Query Language (METAQL)",
	"tags": [],
	"description": "",
	"content": "METAQL - Это защищенный SQL для запросов к данным Garpun DataHub. Основан на синтаксисе PostgreSQL.\nОсобенности  SELECT * FROM ... не поддерживается Нельзя называть поля или алясы зарезарвированными именами: date Добавлен оператор ILIKE для регистронезависимного сравнения строк Поддерживаются только SELECT запросы JOIN не поддерживаются Работает ограниченный набор функций, описанных ниже OR в условиях не поддерживается. Используется AND с отицанием или IN ( \u0026hellip; )  Функции Работают функции агрегации:\n MIN, MAX, SUM, AGV COUNT(*), COUNT(DISTINCT поле) ARRAY_AGG  Функции преобразований:\n ROUND CONCAT NULLIF COALESCE  Фильтрация WHERE Работают операторы сравнения:\n =, !=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= IN, NOT IN LIKE, NOT LIKE ILIKE, NOT ILIKE BETWEEN IS NULL, IS NOT NULL  Экранирование Одинарная кавычка экранируется одинарной кавычкой. Например, еси вам нужно поискать все кампании, в названии которых есть одинарная кавычка, то вам необходимо выполнить такой запрос:\nselect id, remote_id, name, engine from adplatform.campaign where name like \u0026#39;%\u0026#39;\u0026#39;%\u0026#39; Если нужно поискать клиента по точному совпадению, то принцип будет такой же:\nselect id, name from adplatform.client where name = \u0026#39;Тестовый \u0026#39;\u0026#39; проект\u0026#39; Примеры Получение статистики по аккаунтам SELECT stat_date, account_id, SUM(cost) as cost FROM adplatform.campaign_stats_report WHERE stat_date BETWEEN '2020-01-01' AND '2020-01-05' GROUP BY stat_date, account_id HAVING SUM(cost) \u0026gt; 1 ORDER BY cost DESC  Получение изменившихся клиентов SELECT id, name, modification_time FROM adplatform.client WHERE modification_time \u0026gt; '2020-03-31T12:21:46+0300'  "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/libraries/",
	"title": "Библиотеки",
	"tags": [],
	"description": "",
	"content": "Garpun DataHub Python Library Если вы программируете на языке Python, то существует python-библиотека\nБиблиотека работает на основе google-api-python-client. Это позволяет нам не думать о реализациях авторизации и работе с http, а заниматься бизнес инструментарием.\nВариант вызова через Google Lib Python GitHub google-api-python-client\nimport os import json DATA_DIR = os.path.join(os.path.dirname(__file__), \u0026quot;data\u0026quot;) AUTHORIZED_USER_FILE = os.path.join(DATA_DIR, \u0026quot;./creds.json\u0026quot;) // CHANGE TO YOU PATH from google.auth.transport.requests import AuthorizedSession from google.oauth2 import service_account as SA from metasdk.utils import pretty_json creds: SA.Credentials = SA.Credentials.from_service_account_file( AUTHORIZED_USER_FILE, scopes=[\u0026quot;datahub\u0026quot;], ) API_URL = \u0026quot;https://datahub-api.garpun.com/v1/metaql/query\u0026quot; def do_query(query: str, shard_key: str = None): session: AuthorizedSession = AuthorizedSession(credentials=creds) resp = session.post(API_URL, json={ \u0026quot;query\u0026quot;: query, \u0026quot;shardKey\u0026quot;: shard_key }) print(\u0026quot;resp = %s\u0026quot; % str(resp)) print(\u0026quot;resp.headers = %s\u0026quot; % str(resp.headers)) returned_rows = None error = None if resp.ok: returned_rows = 0 for line in resp.iter_lines(): returned_rows += 1 row = json.loads(line) print(\u0026quot;row = %s\u0026quot; % str(row)) print(\u0026quot;returned_rows = %s\u0026quot; % str(returned_rows)) else: error = resp.json() print(pretty_json(error)) return {\u0026quot;returned_rows\u0026quot;: returned_rows, \u0026quot;error\u0026quot;: error} query = \u0026quot;\u0026quot;\u0026quot; select id, name from adplatform.client \u0026quot;\u0026quot;\u0026quot; res = do_query(query)  Вариант вызова через Google Lib Java GitHub google-auth-library-java\nimport com.google.api.client.http.*; import com.google.api.client.http.javanet.NetHttpTransport; import com.google.api.client.http.json.JsonHttpContent; import com.google.api.client.json.jackson2.JacksonFactory; import com.google.auth.http.HttpCredentialsAdapter; import com.google.auth.oauth2.GoogleCredentials; import com.google.common.collect.ImmutableMap; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.InputStreamReader; import java.util.Collections; public class Main { public static void main(String[] args) throws Exception { String credFilename = \u0026quot;./creds.json\u0026quot;; // CHANGE TO YOU PATH GoogleCredentials credentials = GoogleCredentials.fromStream( new FileInputStream(credFilename) ); if (credentials.createScopedRequired()) { credentials = credentials.createScoped(Collections.singletonList(\u0026quot;datahub\u0026quot;)); } credentials.refreshIfExpired(); HttpTransport transport = new NetHttpTransport(); HttpCredentialsAdapter httpCredsAdapter = new HttpCredentialsAdapter(credentials); HttpRequestFactory requestFactory = transport.createRequestFactory(httpCredsAdapter); ImmutableMap\u0026lt;String, String\u0026gt; queryBody = ImmutableMap.of( \u0026quot;query\u0026quot;, \u0026quot;select id, name from adplatform.client limit 10\u0026quot;, // \u0026quot;shardKey: \u0026quot;\u0026quot; // Нужно ли вам получать shardKey и как это сделать ищите в документации к методу ); JsonHttpContent postContent = new JsonHttpContent(new JacksonFactory(), queryBody); GenericUrl url = new GenericUrl(\u0026quot;https://datahub-api.garpun.com/v1/metaql/query\u0026quot;); HttpRequest request = requestFactory.buildPostRequest(url, postContent); HttpResponse response = request.execute(); BufferedReader reader = new BufferedReader(new InputStreamReader(response.getContent())); while(reader.ready()) { String line = reader.readLine(); System.out.println(\u0026quot;line = \u0026quot; + line); } } }  Вариант вызова через Google Lib PHP Важно! Используйте библиотеку версии \u0026gt;= 1.9.0\nРаботает с использованием Guzzle\nGitHub google-auth-library-php\nhttps://github.com/garpun/examples-php \u0026lt;?php require_once __DIR__ . '/vendor/autoload.php'; use Google\\Auth\\Middleware\\AuthTokenMiddleware; use GuzzleHttp\\Client; use GuzzleHttp\\HandlerStack; $credFileName = \u0026quot;./creds.json\u0026quot;; // CHANGE TO YOU PATH $jsonKey = json_decode(file_get_contents($credFileName), true); $creds = new \\Google\\Auth\\OAuth2([ 'audience' =\u0026gt; $jsonKey['token_uri'], 'issuer' =\u0026gt; $jsonKey['client_email'], 'scope' =\u0026gt; ['account-management'], 'signingAlgorithm' =\u0026gt; 'RS256', 'signingKey' =\u0026gt; $jsonKey['private_key'], 'signingKeyId' =\u0026gt; $jsonKey['private_key_id'], 'sub' =\u0026gt; null, 'tokenCredentialUri' =\u0026gt; $jsonKey['token_uri'], ]); $middleware = new AuthTokenMiddleware($creds); $stack = HandlerStack::create(); $stack-\u0026gt;push($middleware); $client = new Client([ 'handler' =\u0026gt; $stack, 'base_uri' =\u0026gt; 'https://datahub-api.garpun.com', 'auth' =\u0026gt; 'google_auth' ]); $response = $client-\u0026gt;post('v1/metaql/query', [ 'json' =\u0026gt; [ \u0026quot;query\u0026quot; =\u0026gt; \u0026quot;select id, name from adplatform.client where name is not null\u0026quot;, \u0026quot;shardKey\u0026quot; =\u0026gt; null ] ]); print_r((string)$response-\u0026gt;getBody()); "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/best-practies/",
	"title": "Лучшие практики",
	"tags": [],
	"description": "",
	"content": "Используйте заголовок сжатия данных Http заголовок: Accept-Encoding: gzip.\nПолучение тела ответа с использованием GZIP сжатия.\nОбрабатывайте данные потоково В разных библиотках разных языков это настраивается по своему, но суть одна - не надо дожидаться окончания скачивания данных вашим приложением для начала обработки того, что успело прийти.\nВыбирайте только нужные поля Не стоит перечислять все доступные поля, если вы не пользоветесь ими в действительности. Это уменьшает пропускную способность API, что в конечном итоге влияет и на ваше приложение.\nСинхронизируйте только изменившиеся объекты Обычно приложения хранят у себя время последней синхронизации и в следующих запросах выбирают только изменения. Это критически сокращает объем возвращаемых данных, ускоряет его, а так же позволяет вашему приложению не сравнивать большие массивы данных.\nSELECT id, name, modification_time FROM adplatform.client WHERE modification_time \u0026gt; \u0026#39;2020-03-31T12:21:46+0300\u0026#39; Постарайтесь не делать запросы в начале часа Постарайтесь не делать запросы в начале часа или в другое популярное время - например 00:00, 00:30, 00:45 и пр. Обычно в это время у многих срабатывают cron-задания и в целом это замедляет обработку запросов в API.\n"
},
{
	"uri": "https://cloud.garpun.com/authenticate/",
	"title": "Авторизация",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/authenticate/oauth2/",
	"title": "Авторизация через OAuth2",
	"tags": [],
	"description": "",
	"content": "Рекомендуется для связи Браузер → Сервер\nПройдите первоначальную настройку проекта Убедитесь, что выполнили все инструкции из раздела по добавлению проекта и приложения\nДобавьте OAuth клиента Перейдите в карточку проекта, зайдите на страницу \u0026ldquo;Клиенты OAuth\u0026rdquo; и добавьте нового oauth клиента.\nКак и в любых других oauth системах авторизации вы должны будете заполнить \u0026ldquo;Разрешенные URI перенаправления\u0026rdquo;.\nПосле успешного добавления вы получаете идентификатор и секрет клиента, с ними вы можете проходить процедура oauth авторизации.\nПолучение токена Получение токена в обмен на код, извлеченный из URL:\n Приложение направляет пользователя на страницу Garpun OAuth, где он может разрешить доступ к своим данным. Пользователь разрешает доступ приложению. Garpun OAuth перенаправляет пользователя на адрес, указанный в поле Callback URL при регистрации приложения. Код подтверждения (или описание ошибки) передается в параметре URL перенаправления. Приложение получает адрес перенаправления и извлекает код подтверждения. Приложение отправляет POST-запрос с кодом. Garpun OAuth возвращает токен или ошибку в теле ответа.  Запрос кода подтверждения https://account.garpun.com/oauth2/authorize?response_type=code client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; redirect_uri=\u0026lt;адрес перенаправления\u0026gt; \u0026amp; state=\u0026lt;произвольная строка\u0026gt; \u0026amp; scope=\u0026lt;запрашиваемые необходимые права\u0026gt;  Получение кода подтверждения из URL Когда пользователь разрешает доступ к своим данным Garpun OAuth перенаправляет пользователя на указанный вами redirect_uri с добавлением GET параметра code\nОбмен кода подтверждения на токен Приложение отправляет код, а также свой идентификатор и пароль в POST-запросе.\nPOST /oauth2/token HTTP/1.1 Host: account.garpun.com Content-type: application/x-www-form-urlencoded Content-Length: \u0026lt;длина тела запроса\u0026gt; grant_type=authorization_code \u0026amp; code=\u0026lt;код подтверждения\u0026gt; \u0026amp; client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; client_secret=\u0026lt;пароль приложения\u0026gt;  Формат ответа с токеном { \u0026quot;scopes\u0026quot;: [ \u0026quot;userinfo.profile\u0026quot; ], \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot;, \u0026quot;expires_in\u0026quot;: 300, \u0026quot;access_token\u0026quot;: \u0026quot;XXXXX\u0026quot;, \u0026quot;refresh_token\u0026quot;: \u0026quot;XXXXX\u0026quot;, \u0026quot;user_id\u0026quot;: 10191, \u0026quot;company_id\u0026quot;: 1 }   scopes: Области доступа, доступные этому токену token_type: Тип выданного токена. Всегда принимает значение «bearer» expires: Время жизни токена в секундах access_token: OAuth-токен с запрошенными правами refresh_token: Токен, который можно использовать только для продления срока жизни соответствующего OAuth-токена\u0026rdquo;\u0026rsquo;  Время жизни refresh-токена совпадает с временем жизни OAuth-токена.\nЕсли выдать токен не удалось, то ответ содержит описание ошибки:\n{ \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot;, \u0026quot;error\u0026quot;: \u0026quot;\u0026lt;код ошибки\u0026gt;\u0026quot;, \u0026quot;error_description\u0026quot;: \u0026quot;\u0026lt;описание ошибки\u0026gt;\u0026quot; }  Обновить токен Получение токена в обмен на refresh-токен:\n Приложение отправляет POST-запрос с refresh-токеном. Garpun OAuth возвращает новый access_token в теле ответа.  POST /oauth2/token HTTP/1.1 Host: account.garpun.com Content-type: application/x-www-form-urlencoded Content-Length: \u0026lt;длина тела запроса\u0026gt; grant_type=refresh_token \u0026amp; refresh_token=\u0026lt;refresh_token\u0026gt; \u0026amp; client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; client_secret=\u0026lt;пароль приложения\u0026gt; В теле ответа вы получите такую же структуру, как и в случае получения токена по authorization_code\n"
},
{
	"uri": "https://cloud.garpun.com/apis/",
	"title": "APIs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/authenticate/service_account/",
	"title": "Авторизация с помощью сервисного аккаунта",
	"tags": [],
	"description": "",
	"content": "Рекомендуется для связи Сервер → Сервер\nПройдите первоначальную настройку проекта Убедитесь, что выполнили все инструкции из раздела по добавлению проекта и приложения\nДобавьте сервисный аккаунт В проекте на вкладке \u0026ldquo;API и сервисы / Сервисные аккаунты\u0026rdquo; создайте новый аккаунт. По сути это отдельный пользователь Garpun, который имеет доступ к аккаунту вашей организации с максимальными правами, его действия будут логироваться как действия обычного пользователя.\nДобавьте ключ доступа к сервисному аккаунту После создания сервисного аккаунта вы попадаете на его карточку, там вы должны выпустить api-ключ.\nСохраните его в защищенном месте, так как если вы его потеряете - то с его помощью злоумышленники смогу получить доступ к вашему приложению.\nЕсли это произошло - удалите ключ и доступ будет отозван в течение некоторго непродолжительного времени.\nВы можете добавить несколько ключей для вашего приложения, если это необходимо например для разных подсистем.\nПолучение токена Чтобы работать с API нужно сгенерировать jwt токен с помощью сервисного аккаунта и обменять его на access_token для доступа в апи.\nВ этом случае у вас не будет refresh_token. Работает так (RFC5723):\n вы генеририруете jwt_assertion токен у себя отправляете его на сервер account.garpun.com сервер проверяет jwt подпись и выдает вам access_token  Вы можете реализовать это вручную или с использованием Google Auth Lib. На текущий момент проверна работосполобность библиотек для Java и Python\nГенерация с помошью Google Auth Lib Java google-auth-library-java\nimport com.google.auth.oauth2.AccessToken; import com.google.auth.oauth2.GoogleCredentials; import java.io.FileInputStream; import java.util.Collections; public class Main { public static void main(String[] args) throws Exception { String credFilename = \u0026quot;../creds.json\u0026quot;; GoogleCredentials credentials = GoogleCredentials.fromStream( new FileInputStream(credFilename) ); if (credentials.createScopedRequired()) { credentials = credentials.createScoped(Collections.singletonList(\u0026quot;account-management\u0026quot;)); } credentials.refreshIfExpired(); AccessToken token = credentials.getAccessToken(); System.out.println(\u0026quot;token = \u0026quot; + token); } }  Генерация с помошью Google Auth Lib Python google-auth-library-python\nfrom google.auth.transport.requests import Request from google.oauth2 import service_account from google.oauth2.service_account import Credentials credFileName = \u0026quot;../creds.json\u0026quot; credentials: Credentials = service_account.Credentials.from_service_account_file( credFileName, scopes=['account-management'], ) credentials.refresh(Request()) print(\u0026quot;credentials.token = %s\u0026quot; % str(credentials.token))  Генерация вручную на Python Это пример на языке Python\nimport json import time import jwt import requests # Считываем доступы к dict with open('creds.json', 'r') as f: sa = json.loads(f.read()) # Готовим данные для JWT issuer_ = sa['client_email'] key_id = sa['private_key_id'] private_key = sa['private_key'] now = int(time.time()) payload = { 'aud': sa['token_uri'], 'iss': issuer_, 'iat': now, 'exp': now + 360 } # Формирование JWT encoded_token = jwt.encode( payload, private_key, algorithm='RS256', # передача kid ОБЯЗАТЕЛЬНА! headers={'kid': key_id}) jwt_assertion = str(encoded_token.decode('utf-8')) # Получаем access token по подписанному вам jwt token_url_ = payload['aud'] resp = requests.post(token_url_, data={ \u0026quot;assertion\u0026quot;: jwt_assertion, \u0026quot;grant_type\u0026quot;: \u0026quot;urn:ietf:params:oauth:grant-type:jwt-bearer\u0026quot; }) print(\u0026quot;resp.status_code = %s\u0026quot; % str(resp.status_code)) if resp.ok: token_info = resp.json() print(\u0026quot;access_token = %s\u0026quot; % str(token_info['access_token'])) print(\u0026quot;token_info = %s\u0026quot; % str(token_info)) else: print(\u0026quot;resp.text = %s\u0026quot; % str(resp.text))  "
},
{
	"uri": "https://cloud.garpun.com/apis/errors/",
	"title": "Обработка ошибок",
	"tags": [],
	"description": "",
	"content": "Ошибки будут приходить с http_code \u0026gt;= 400, поэтому рекомендуется делать десеариализацию json и проверку ошибок именно с таким кодом ответа.\nПример ошибки { /* gRPC код ошибки. Ниже подробное описание */ \u0026quot;code\u0026quot;: 3, \u0026quot;details\u0026quot;: [ /* Детали ошибки. Могут не приходить */ { /* По этому @type можно уточнять ошибку в коде программы */ \u0026quot;@type\u0026quot;: \u0026quot;type.googleapis.com/io.devision.rpc.ServiceError\u0026quot;, \u0026quot;kind\u0026quot;: \u0026quot;ResourceAccessError\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;ENTITY_NOT_FOUND\u0026quot; } ], /* Текст ошибки (может менятся со временем) */ \u0026quot;message\u0026quot;: \u0026quot;Entity not found. Alias=unknown_entity\u0026quot; }  Описание code Ошибки всегда будут соответсвовать этому документу https://cloud.google.com/inference/reference/rest/v1/Code?hl=ru\n  Ошибка Описание HTTP Mapping Code    OK Не ошибка, запрос успешно выполнился HTTP Mapping: 200 OK 0  CANCELLED Операция была отменена HTTP Mapping: 499 Client Closed Request 1  NOT_FOUND Не найдено. HTTP Mapping: 404 Not Found 5  INVALID_ARGUMENT Вы передали неправильный параметр. HTTP Mapping: 400 Bad Request 3  DEADLINE_EXCEEDED Неудалось выполнить операцию за разумное время HTTP Mapping: 504 Gateway Timeout 4  PERMISSION_DENIED У вас нет прав на выполнение операции HTTP Mapping: 403 Forbidden 7  FAILED_PRECONDITION Операция была отклонена, поскольку система не находится в состоянии, необходимом для выполнения операции. Например, удаляемый каталог не является пустым, бюджет аккаунта находится в неверном состоянии HTTP Mapping: 400 Bad Request 9  INTERNAL Ошибка возникла на уровне нашей системы. Обратитесь в тех.поддержку. HTTP Mapping: 500 Internal Server Error 13    "
},
{
	"uri": "https://cloud.garpun.com/api_accountmanagement/api/",
	"title": "Версии Api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/api/",
	"title": "Версии Api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_generator/api/",
	"title": "Версии Api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/",
	"title": "Справочники",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/reports/",
	"title": "Отчеты",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_generator/",
	"title": "Generator",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_accountmanagement/api/v1beta2/",
	"title": "v1beta2",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://accountmanagement-api.garpun.com\n    // .swagger-ui .info hgroup.main window.onload = function () { // Build a system const ui = SwaggerUIBundle({ url: \"../v1beta2_accountmanagement.swagger.json\", // https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md dom_id: '#swagger-ui', deepLinking: true, displayOperationId: true, defaultModelsExpandDepth: 0, defaultModelExpandDepth: 100, defaultModelRendering: \"model\", supportedSubmitMethods: [], presets: [ SwaggerUIBundle.presets.apis, // SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], layout: \"BaseLayout\", }) window.ui = ui }  "
},
{
	"uri": "https://cloud.garpun.com/api_generator/api/v2/",
	"title": "v2",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://amp.garpun.com/api\n    // .swagger-ui .info hgroup.main window.onload = function () { // Build a system const ui = SwaggerUIBundle({ url: \"../v2_generator.swagger.json\", // https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md dom_id: '#swagger-ui', deepLinking: true, displayOperationId: true, defaultModelsExpandDepth: 0, defaultModelExpandDepth: 100, defaultModelRendering: \"model\", supportedSubmitMethods: [], presets: [ SwaggerUIBundle.presets.apis, // SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], layout: \"BaseLayout\", }) window.ui = ui }  "
},
{
	"uri": "https://cloud.garpun.com/api_accountmanagement/",
	"title": "Account Management",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/",
	"title": "Garpun Cloud",
	"tags": [],
	"description": "",
	"content": "Garpun Cloud Регистрируйте свои приложения и используйте API.\nЧтобы вызывать api вам нужно:\n Зарегистрироваться в Garpun и добавить приложение Получить токен испольуя авторизацию через сервисный аккаунт или oauth браузерную авторизацию Сделать запрос к нужному вам API:  APIs Эти API будет вам необходимо, если вы являетесь интеграционным партнером Garpun:\n AccountManagement - Высокоуровневые операции с аккаунтами внешних систем: Управление бюджетом, создание аккаунтов в Яндекс Директе, Google Ads и пр Generator - Создание проектов, алгоритмов генерации рекламных кампаний DataHub - Получение списков справочников, статистических отчетов и контента настроенных потоков данных  "
},
{
	"uri": "https://cloud.garpun.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/",
	"title": "DataHub",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cloud.garpun.com/api_datahub/api/v1/",
	"title": "v1",
	"tags": [],
	"description": "",
	"content": "Базовый URL: https://datahub-api.garpun.com\n    // .swagger-ui .info hgroup.main window.onload = function () { // Build a system const ui = SwaggerUIBundle({ url: \"../v1_datahub.swagger.json\", // https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md dom_id: '#swagger-ui', deepLinking: true, displayOperationId: true, defaultModelsExpandDepth: 0, defaultModelExpandDepth: 100, defaultModelRendering: \"model\", supportedSubmitMethods: [], presets: [ SwaggerUIBundle.presets.apis, // SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], layout: \"BaseLayout\", }) window.ui = ui }  "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__algorithm/",
	"title": "Алгоритм (adplatform.algorithm)",
	"tags": [],
	"description": "",
	"content": "Объект сервиса Garpun Generator. Является группой настроек генерации рекламных кампаний\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название алгоритма Type: TEXT\nSemantic role: DIMENSION   client_id Клиент Type: LONG\nSemantic role: DIMENSION   state Состояние алгоритма.\nactive, draft. Type: TEXT\nSemantic role: DIMENSION   has_any_timetable Имеет настроенное расписание Type: BOOLEAN\nSemantic role: DIMENSION   is_archived Архивный Type: BOOLEAN\nSemantic role: DIMENSION   creation_time Добавлен.\nВремя добавления алгоритма Type: DATETIME\nSemantic role: DIMENSION   modification_time Обновлен.\nВремя изменения или обработки алгоритма Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/garpun_storage__virtual_ad_group/",
	"title": "Виртуальная группа объявлений (garpun_storage.virtual_ad_group)",
	"tags": [],
	"description": "",
	"content": "Создается Garpun Generator. Не имеет remote_id так как непосредственно этот объект не загружается в рекламную систему. В рекламную систему загружается другой объект - garpun_storage.ad_group\nПример запроса:\nSELECT id, virtual_campaign_id, name, creation_time, modification_time FROM garpun_storage.virtual_ad_group При запросе этих данных обязательно нужно передавать поле shardKey, в котором нужно указать значение account_id из нужной вам Виртуальной кампании\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название виртуальной группы объявлений Type: TEXT\nSemantic role: DIMENSION   virtual_campaign_id Виртуальная кампания Type: LONG\nSemantic role: DIMENSION   creation_time Добавлена Type: DATETIME\nSemantic role: DIMENSION   modification_time Обновлена Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__virtual_campaign/",
	"title": "Виртуальная кампания (adplatform.virtual_campaign)",
	"tags": [],
	"description": "",
	"content": "Создается Garpun Generator или сервисом управления ставками. Является обобщающей сущностью нам реальными рекламными кампаниями в рекламных системах\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название Type: TEXT\nSemantic role: DIMENSION   modification_time Обновлена Type: DATETIME\nSemantic role: DIMENSION   account_id Внешний аккаунт Type: LONG\nSemantic role: DIMENSION   algorithm_id Алгоритм Type: LONG\nSemantic role: DIMENSION   engine Система Type: TEXT\nSemantic role: DIMENSION   status Статус.\narchive, enable, pause, delete Type: TEXT\nSemantic role: DIMENSION   is_automated Кампания создана автоматизированным способом с помощью генератора Type: BOOLEAN\nSemantic role: DIMENSION   lock_params Параметры блокировки в Garpun Generator.\nПо умолчанию null, а если lock включен (например пауза), то значение имеет следующую структуру, например: {\u0026lsquo;status\u0026rsquo;: \u0026lsquo;pause\u0026rsquo;} Type: JSON\nSemantic role: DIMENSION   creation_time Добавлена Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__account/",
	"title": "Внешний аккаунт (adplatform.account)",
	"tags": [],
	"description": "",
	"content": "Аккаунты из систем Яндекс.Директ, Google Ads, Facebook, VK и пр.\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Полное название аккаунта.\nКонкатенируется по внутренним правилам из полей login и title Type: TEXT\nSemantic role: DIMENSION   engine Система Type: TEXT\nSemantic role: DIMENSION   login Login.\nВнешний глобально уникальный id аккаунта. Уникализируется вместе с полейм engine Type: TEXT\nSemantic role: DIMENSION   title Название аккаунта Type: TEXT\nSemantic role: DIMENSION   client_id Клиент.\nМожет быть не заполненным, если аккаунт не привязан к конкретному Клиенту Type: LONG\nSemantic role: DIMENSION   area_id Площадка.\nДля некоторых аккаунтов прописана явная пренадлежность площадке Type: LONG\nSemantic role: DIMENSION   creation_time Дата добавления.\nВремя, когда Garpun первый раз скачал аккаунт из внешней системы Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/garpun_main__geo_region/",
	"title": "Георегионы (garpun_main.geo_region)",
	"tags": [],
	"description": "",
	"content": "Возвращает список регионов, зарегистрированных в Garpun. Используется в первую очередь для таргетинга в сервисе Garpun Generator\n   Name Description Additional     garpun_code Код по Garpun. Используется как первичный ключ Type: TEXT\nSemantic role: DIMENSION   name Название региона Type: TEXT\nSemantic role: DIMENSION   google_code Регион по версии Google Ads. https://developers.google.com/adwords/api/docs/appendix/geotargeting Type: TEXT\nSemantic role: DIMENSION   yandex_code Регион по версии Yandex Direct. https://yandex.ru/dev/direct/doc/ref-v5/dictionaries/get.html/ Type: TEXT\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/garpun_storage__ad_group/",
	"title": "Группа объявлений (garpun_storage.ad_group)",
	"tags": [],
	"description": "",
	"content": "Создается Garpun Generator в момент Партицирования рекламных объектов. Загружается в рекламную систему. Содержит в себе объявления и ключевые фразы.\nПример запроса:\nSELECT id, virtual_ad_group_id, remote_id, creation_time, modification_time FROM garpun_storage.ad_group WHERE modification_time \u0026gt; '2020-10-02' При запросе этих данных обязательно нужно передавать поле shardKey, в котором нужно указать значение account_id из нужной вам Виртуальной кампании\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   virtual_ad_group_id Виртуальная группа объявлений Type: LONG\nSemantic role: DIMENSION   remote_id Внешний id группы объявлений. Заполняется после загрузки группы объявлений в рекламную систему Type: LONG\nSemantic role: DIMENSION   creation_time Добавлена Type: DATETIME\nSemantic role: DIMENSION   modification_time Обновлена Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/reports/garpun_main__generator_tasks_report/",
	"title": "Задачи по алгоритмам (garpun_main.generator_tasks_report)",
	"tags": [],
	"description": "",
	"content": "У алгоритма есть 3 стадии:\n Импорт - когда идет создание или обновление рекламных данных на основании фида Партиционирование - создание задач для загрузки РК и формирование РК в соот с лимитами внешних систем. Синхронизация - когда идет создания во внешней системы РК.  Если соблюдать лимиты по шаблонам объявлений, то проблем в генерации нет - ошибок импорта по объявлениям просто не будет.\nЕсли используются ключевые слова, настроенные через Garpun, то в любом случае будет сгенерирован ключ - как условие показа для объявления. Поэтому часть импорта будет без ошибок, если вы соблюдаете лимиты по объявлениям и используете текущий механизм формирования ключей. Исключение проф. область которая появилась и мы ничего о ней не знаем, но на этом этапе были ошибки и мы их разбирали - потому информация об ошибка на данном этапе при разборе Вам нужна, что и сделано вы будет иметь возможнос получить инфу по не сгенерированным объектам. по данным из хеша определите что это за объявление у вас в системе.\nСинхронизация, в данном случае будете получать ошибки по алгоритму, в контектсе ошибки будет информация из внешней системы. по расширенной инфе можно сопоставить с рекламным объектом.\nКаждый апдейт происходит у нас с генерации. Мы смотрим, что нужно обновить и также если в файле клиента придут новые РК мы их сформируем. Проверим нужно ли обновить текущие рекламные кампании. Пример запроса:\nSELECT task_id, result, type, status, engine, algorithm_id, target_time, start_time, stop_time, client_id FROM garpun_main.generator_tasks_report WHERE target_time \u0026gt; '2020-10-01' AND algorithm_id != 19126 LIMIT 10    Name Description Additional     target_time Дата/время время ожидаемого начала задачи. Запуск именно в это время не гарантируется, но запуск будет произведен не раньше указанного времени Type: DATETIME\nSemantic role: DIMENSION   task_id Task id Type: LONG\nSemantic role: DIMENSION   stop_time Дата/время завершения задачи Type: DATETIME\nSemantic role: DIMENSION   algorithm_id Алгоритм Type: LONG\nSemantic role: DIMENSION   engine Система Type: TEXT\nSemantic role: DIMENSION   status Статус задачи Type: TEXT\nSemantic role: DIMENSION   type Тип задачи Type: TEXT\nSemantic role: DIMENSION   client_id Клиент Type: LONG\nSemantic role: DIMENSION   result Результат.\nИнформация с результатом выполнения задачи. Зависит от type и engine Type: JSON\nSemantic role: DIMENSION   start_time Дата/время старта задачи Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__campaign/",
	"title": "Кампания (adplatform.campaign)",
	"tags": [],
	"description": "",
	"content": "Рекламная кампания, в которой непосредственно находится во внешней рекламной системе\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название Type: TEXT\nSemantic role: DIMENSION   virtual_campaign_id Виртуальная кампания Type: LONG\nSemantic role: DIMENSION   product_id Продукт Type: LONG\nSemantic role: DIMENSION   type Тип из внешней системы Type: TEXT\nSemantic role: DIMENSION   url_example URL одного из объявлений кампании Type: TEXT\nSemantic role: DIMENSION\nSemantic type: URL   creation_time Добавлена Type: DATETIME\nSemantic role: DIMENSION   modification_time Обновлена Type: DATETIME\nSemantic role: DIMENSION   remote_id Внешний id кампании Type: TEXT\nSemantic role: DIMENSION   engine Система Type: TEXT\nSemantic role: DIMENSION   status Статус Type: TEXT\nSemantic role: DIMENSION   remote_status Статус из внешней системы Type: TEXT\nSemantic role: DIMENSION   area_id Площадка Type: LONG\nSemantic role: DIMENSION   account_id Внешний аккаунт Type: LONG\nSemantic role: DIMENSION   algorithm_id Алгоритм Type: LONG\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__client_category/",
	"title": "Категория клиента (adplatform.client_category)",
	"tags": [],
	"description": "",
	"content": "   Name Description Additional     id ID Type: TEXT\nSemantic role: DIMENSION   name Название категории Type: TEXT\nSemantic role: DIMENSION   is_active Активная Type: BOOLEAN\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__client/",
	"title": "Клиент (adplatform.client)",
	"tags": [],
	"description": "",
	"content": "В рамках клиентов создаются Алгоритмы, Виртуальные кампании и реальные рекламные кампании\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название клиента Type: TEXT\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION   is_enabled Активный Type: BOOLEAN\nSemantic role: DIMENSION   is_archived Архивный Type: BOOLEAN\nSemantic role: DIMENSION   category_id Категория клиента Type: LONG\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/meta__ex_access/",
	"title": "Подключение (meta.ex_access)",
	"tags": [],
	"description": "",
	"content": "Подключения содержат токены доступа в внешним системам. Например к Yandex.Direct и пр.\n   Name Description Additional     id ID Type: TEXT\nSemantic role: DIMENSION   name Название Type: TEXT\nSemantic role: DIMENSION   status_check_time Последня проверка Type: DATETIME\nSemantic role: DIMENSION   author_user_id Подключил Type: LONG\nSemantic role: DIMENSION   company_id Компания Type: LONG\nSemantic role: DIMENSION   ex_system_id Система подключения Type: TEXT\nSemantic role: DIMENSION   login Логин подключения Type: TEXT\nSemantic role: DIMENSION   user_status Статус Type: TEXT\nSemantic role: DIMENSION   creation_time Дата подключения Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__product/",
	"title": "Продукт (adplatform.product)",
	"tags": [],
	"description": "",
	"content": "Продуктом может являться категория интернет-магазина или какой-то крупный сегмент, жилищный комплекс или что-то на столько же крупное. Рекламная кампания может быть привязана к продукту клиента.\n   Name Description Additional     id ID Type: LONG\nSemantic role: DIMENSION   name Название Type: TEXT\nSemantic role: DIMENSION   is_active Активный.\nВыводить в списках Type: BOOLEAN\nSemantic role: DIMENSION   client_id Клиент Type: LONG\nSemantic role: DIMENSION   utm UTM.\nПодстрока для поиска продукта в ссылках объявлений Type: TEXT\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/adplatform__engine/",
	"title": "Система (adplatform.engine)",
	"tags": [],
	"description": "",
	"content": "Используется в рекламной статистике. От ex_system отличается тем, что может агрегировать статистику из разных ex_system. Например facebook и facebook_leads\n   Name Description Additional     engine ID Type: TEXT\nSemantic role: DIMENSION   name Название системы Type: TEXT\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/dicts/meta__ex_system/",
	"title": "Система подключения (meta.ex_system)",
	"tags": [],
	"description": "",
	"content": "Системы, для которых хранятся токены для доступа в API\n   Name Description Additional     id ID Type: TEXT\nSemantic role: DIMENSION   name Название внешней системы Type: TEXT\nSemantic role: DIMENSION   is_allowed Может ли использоваться Type: BOOLEAN\nSemantic role: DIMENSION   creation_time Дата создания Type: DATETIME\nSemantic role: DIMENSION   modification_time Дата изменения Type: DATETIME\nSemantic role: DIMENSION    "
},
{
	"uri": "https://cloud.garpun.com/api_datahub/reports/adplatform__campaign_stats_report/",
	"title": "Статистика по кампаниям (adplatform.campaign_stats_report)",
	"tags": [],
	"description": "",
	"content": "   Name Description Additional     stat_date Дата Type: DATE\nSemantic role: DIMENSION\nSemantic type: YEAR_MONTH_DAY   stat_month Месяц.\nДата начала месяца Type: DATE\nSemantic role: DIMENSION\nSemantic type: YEAR_MONTH   campaign_name Название рекламной кампании Type: TEXT\nSemantic role: DIMENSION   campaign_remote_id ID рекламной кампании во внешней системе Type: TEXT\nSemantic role: DIMENSION   campaign_type Тип рекламной кампании Type: TEXT\nSemantic role: DIMENSION   category_id Категория клиента Type: LONG\nSemantic role: DIMENSION   category_name Название категории Type: TEXT\nSemantic role: DIMENSION   channel Канала рекламы Type: TEXT\nSemantic role: DIMENSION   channel_name Название канала рекламы Type: TEXT\nSemantic role: DIMENSION   client_id Клиент Type: LONG\nSemantic role: DIMENSION   client_name Название клиента Type: TEXT\nSemantic role: DIMENSION   company_id Компания Type: LONG\nSemantic role: DIMENSION   engine Система Type: TEXT\nSemantic role: DIMENSION   engine_name Название системы Type: TEXT\nSemantic role: DIMENSION   engine_type Тип системы Type: TEXT\nSemantic role: DIMENSION   modification_time Дата модификации статистики Type: DATETIME\nSemantic role: DIMENSION   product_id Продукт Type: LONG\nSemantic role: DIMENSION   product_name Название продукта Type: TEXT\nSemantic role: DIMENSION   url_example URL одного из объявлений кампании Type: TEXT\nSemantic role: DIMENSION\nSemantic type: URL   account_id Аккаунт Type: LONG\nSemantic role: DIMENSION   account_name Название аккаунта Type: TEXT\nSemantic role: DIMENSION   area_id Площадка Type: LONG\nSemantic role: DIMENSION   area_name Название площадки Type: TEXT\nSemantic role: DIMENSION   campaign_id Рекламная кампания Type: LONG\nSemantic role: DIMENSION   clicks Клики Type: LONG\nSemantic role: METRIC   duration Длительность сессии Type: LONG\nSemantic role: METRIC\nSemantic type: DURATION   calls Звонки Type: LONG\nSemantic role: METRIC   calls_duration Длительность звонка Type: LONG\nSemantic role: METRIC\nSemantic type: DURATION   unique_calls Уникальные звонки Type: LONG\nSemantic role: METRIC   target_calls Целевые звонки Type: LONG\nSemantic role: METRIC   new_visits Новые посетители Type: LONG\nSemantic role: METRIC   pageviews Просмотры страниц Type: LONG\nSemantic role: METRIC   cost Стоимость Type: DECIMAL\nSemantic role: METRIC   rest Остаток на РК на дату записи статистики Type: DECIMAL\nSemantic role: METRIC   transaction_revenue Сумма заказов Type: DECIMAL\nSemantic role: METRIC   transactions Заказы Type: LONG\nSemantic role: METRIC   impressions Показы Type: LONG\nSemantic role: METRIC   visits Сессии Type: LONG\nSemantic role: METRIC   all_price_limit Общий лимит кампании Type: DECIMAL\nSemantic role: METRIC   day_price_limit Дневной лимит кампании Type: DECIMAL\nSemantic role: METRIC   video_views Общее количество видеопоказов Type: LONG\nSemantic role: METRIC   video_views_full Общее количество видеопоказов, просмотренных на 100% Type: LONG\nSemantic role: METRIC   video_views_half Общее количество видеопоказов, просмотренных на 50% Type: LONG\nSemantic role: METRIC   video_views_quarter Общее количество видеопоказов, просмотренных на 25% Type: LONG\nSemantic role: METRIC   video_clicks_site Общее количество видеокликов Type: LONG\nSemantic role: METRIC   leads Лиды Type: LONG\nSemantic role: METRIC   account_cost Стоимость в валюте аккаунта Type: DECIMAL\nSemantic role: METRIC   bounces Отказы Type: INT\nSemantic role: METRIC    "
}]